// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract HornyDevilNFT is ERC721, ERC721URIStorage, Ownable {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIdCounter;

    // Struct to store devil attributes
    struct Devil {
        string hornType;   // e.g., "Curved", "Spiked", "Twisted"
        string tailStyle;  // e.g., "Pointed", "Forked", "Flame-Tipped"
        uint256 rarity;    // Rarity score (1-100)
    }

    // Mapping from token ID to Devil data
    mapping(uint256 => Devil) public devils;

    // Minting price (in wei)
    uint256 public mintPrice = 0.0666 ether; // Thematic pricing for devilish vibe

    // Maximum supply of NFTs
    uint256 public constant MAX_SUPPLY = 6666; // Thematic number for devilish appeal

    constructor() ERC721("HornyDevilNFT", "HDEVIL") Ownable(msg.sender) {}

    // Mint a new HornyDevil NFT
    function mintHornyDevilNFT(
        address to,
        string memory tokenURI,
        string memory hornType,
        string memory tailStyle,
        uint256 rarity
    ) public payable returns (uint256) {
        require(msg.value >= mintPrice, "Insufficient ETH sent");
        require(_tokenIdCounter.current() < MAX_SUPPLY, "Max supply reached");
        require(rarity >= 1 && rarity <= 100, "Rarity must be between 1 and 100");

        uint256 newTokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();

        _safeMint(to, newTokenId);
        _setTokenURI(newTokenId, tokenURI);

        // Store devil attributes
        devils[newTokenId] = Devil({
            hornType: hornType,
            tailStyle: tailStyle,
            rarity: rarity
        });

        return newTokenId;
    }

    // Get devil attributes for a token
    function getDevil(uint256 tokenId) public view returns (Devil memory) {
        require(_exists(tokenId), "Token does not exist");
        return devils[tokenId];
    }

    // Update mint price (only owner)
    function setMintPrice(uint256 newPrice) public onlyOwner {
        mintPrice = newPrice;
    }

    // Withdraw contract balance (only owner)
    function withdraw() public onlyOwner {
        uint256 balance = address(this).balance;
        payable(owner()).transfer(balance);
    }

    // Override required by ERC721URIStorage
    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    // Override required by ERC721URIStorage
    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }

    // Override to support ERC721URIStorage
    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
